# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  build-and-test:
      executor: docker-python
      steps:
        - checkout
        - setup_remote_docker
        - run:
            name: build
            command: docker-compose build timer_app_tests
        - run:
            name: Run tests
            command: docker-compose run timer_app_tests
  #
#

  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  # build-and-test:
  #   # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
  #   # See: https://circleci.com/docs/configuration-reference/#docker-machine-macos-windows-executor
  #   # Be sure to update the tag on this image to a more stable version, using latest can result in unstable builds.
  #   docker:
  #     # - image: microsoft/dotnet:latest
  #     - image: mcr.microsoft.com/dotnet/aspnet:6.0-focal-amd64
  #   # Add steps to the job
  #   # See: https://circleci.com/docs/configuration-reference/#steps
  #   steps:
  #     # Checkout the code as the first step.
  #     - checkout
  #     # Then simply use the dotnet container as you'd expect and run your tests
  #     - run:
  #         # Update this line with the directory that contains your tests project file
  #         working_directory: ~/timer_app_tests
  #         name: Run tests
  #         command: |
  #           dotnet test

# Invoke jobs via workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
