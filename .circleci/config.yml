---
version: 2.1
executors:
  docker-python:
    docker:
      - image: circleci/python:3.7
  docker-dotnet:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
orbs:
  aws-cli: circleci/aws-cli@2.0.6
commands:
  migrate-database:
    description: Migrate database
    parameters:
      stage:
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install SSH client
          command: apt-get update && apt-get install -y openssh-client
      - run:
          name: Install Unzip
          command: apt-get update && apt-get install unzip
      - run:
          name: Install AWS CLI
          command: >
            curl -L -o awscliv2.zip
            "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"

            unzip awscliv2.zip

            ./aws/install
      - run:
          name: Install Session Manager plugin
          command: >
            curl
            "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb"
            -o "session-manager-plugin.deb"

            dpkg -i session-manager-plugin.deb
      - run:
          name: Install dotnet ef core
          command: dotnet tool install dotnet-ef --version 6.0.6 --tool-path
            ./dotnet-ef-local/
      - run:
          name: SSH into RDS and migrate database
          command: >
            echo "cheese"
            echo <<parameters.stage>>

            echo "Getting port from /timer-app/development/db-port"

            PORT=$(aws ssm get-parameter --name /timer-app/development/db-port --query Parameter.Value)
            
            # PORT=$(aws ssm get-parameter --name /timer-app/<<parameters.stage>>/db-port --query Parameter.Value)
            echo ${PORT}

            aws ssm get-parameter --name "/timer-app-jumpbox-pem-key" --output text --query Parameter.Value > ./private-key.pem

            cat ./private-key.pem

            chmod 400 ./private-key.pem

            HOST=$(aws ssm get-parameter --name /timer-app/<<parameters.stage>>/db-hostname --query Parameter.Value)
            echo ${HOST}

            INSTANCE_NAME=$(aws ssm get-parameter --name timer-app-jumpbox-instance-name --query Parameter.Value)
            echo ${INSTANCE_NAME}

            ssh -4 -i ./private-key.pem -Nf -M -L ${PORT//\"}:${HOST//\"}:${PORT//\"} -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" -o ServerAliveInterval=0 -o ProxyCommand="aws ssm start-session --target %h --document AWS-StartSSHSession --parameters portNumber=%p --region=eu-west-2" ec2-user@${INSTANCE_NAME//\"}

            PASSWORD=$(aws ssm get-parameter --name /timer-app/<<parameters.stage>>/db-password --query Parameter.Value)
            echo ${PASSWORD}

            USERNAME=$(aws ssm get-parameter --name /timer-app/<<parameters.stage>>/db-username --query Parameter.Value)
            echo ${USERNAME}

            CONN_STR="Host=localhost;Password=${PASSWORD};Port=${PORT};Username=${USERNAME};Database=<<parameters.stage>>"
            echo ${CONN_STR}

            cd ./timer_app/

            CONNECTION_STRING=${CONN_STR} ./../dotnet-ef-local/dotnet-ef database update -c timer_app.V2.Infrastructure.TimerAppDbContext
  deploy-lambda:
    description: Deploys API via Serverless
    parameters:
      stage:
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install Node.js
          command: |
            curl -sL https://deb.nodesource.com/setup_14.x | bash -
            apt-get update && apt-get install -y nodejs
      - run:
          name: Install serverless CLI
          command: npm i -g serverless
      - run:
          name: Build lambda
          command: |
            cd ./timer_app/
            chmod +x ./build.sh
            ./build.sh
      - run:
          name: Deploy application
          command: |
            cd ./timer_app/
            sls deploy --stage <<parameters.stage>>
jobs:
  aws-cli-cred-setup:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_REGION_NAME
  deploy-to-development:
    executor: docker-dotnet
    steps:
      - deploy-lambda:
          stage: development
  deploy-to-production:
    executor: docker-dotnet
    steps:
      - deploy-lambda:
          stage: production
  migrate-database-production:
    executor: docker-dotnet
    steps:
      - migrate-database:
          stage: production
  migrate-database-development:
    executor: docker-dotnet
    steps:
      - migrate-database:
          stage: development
  check-code-formatting:
    executor: docker-dotnet
    steps:
      - checkout
      - run:
          name: Install dotnet format
          command: dotnet tool install dotnet-format --tool-path ./dotnet-format-local/
      - run:
          name: Run formatter check
          command: ./dotnet-format-local/dotnet-format --check
  build-and-test:
    executor: docker-python
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: build
          command: docker-compose build timer-app-tests
      - run:
          name: Run tests
          command: docker-compose run timer-app-tests
workflows:
  test-and-deploy-development:
    jobs:
      - aws-cli-cred-setup:
          context: aws
      - migrate-database-development:
          requires:
            - aws-cli-cred-setup
      - deploy-to-development:
          requires:
            - migrate-database-development
  test-and-deploy-production:
    jobs:
      - check-code-formatting:
          filters:
            branches:
              only: release
      - build-and-test:
          filters:
            branches:
              only: release
      - deploy-to-production:
          requires:
            - check-code-formatting
            - build-and-test
          filters:
            branches:
              only: release
